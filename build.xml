<!--

This is a sample Ant build file for CMSC 341 projects. Though the layout
used by this build file works well with any project, it is particularly
designed to play well with Eclipse defaults.


Directory Layout
___________________________________________________________________________

This build file assumes that you are using Eclipse Ganymede's default
directory structure for organizing Java projects. That directory structure
is as follows...

Project Name/
|- .classpath
|- .project
|- bin/
`- src/

Detailed file information...

.classpath - an interal Eclipse file, defines classpath & build info
.project - an internal Eclipse file, defines metadata about project
src/ - is the directory you create your source files in
bin/ - is where Eclipse automatically compiles your files to (hidden
in the normal Java perspective)

This ant file is setup to assume some additional resources...

Project Name/
|- .classpath
|- .project
|- bin/
|- build.xml
|- doc/
`- src/

The additional files...

build.xml - place this build file in the root of the project directory
doc/ - where javadocs will get generated to (build file will create)


Ant Properties
___________________________________________________________________________

This build file defines 4 properties...

source.dir - the directory that source code is in (src/ is typically
where Eclipse stores source files by default)
build.dir - the directory that source code is compiled to (bin/ is
typically where Eclipse stores class files by default)
doc.dir - where javadoc generation will be built out to
main.class - the fully qualified name (package + class name) of the
class which should be used to run the program


Ant Targets
___________________________________________________________________________

This build file provides 5 targets...

init - creates directories for class files (bin) and javadocs (doc)
compile - compiles all source code from source directory (src) into the
class files directory (bin)
run - runs the class specified in the properties (see notes below)
clean - utility target to remove class files (bin), javadocs (doc),
and removes any removes any Emacs backup files (*~)
doc - utility target to generate javadoc files (into doc) from the
Java files in the source directory (src)

Additional target notes...

The default project is compile. That is, if you run ant with no
arguments it will compile your source code. To run ant with a specific
target give the name of the target on the command line, like so...

ant target_name

The "run" target is designed to allow you to execute a given class.
In order to pass in command line arguments to your program you must use
the -Dargs flag. For example, to run the program and pass in a single
command line argument of "commands.txt", you would type...

ant -Dargs="commands.txt" run

See comments below for more information on each target.

For more information on ant, see http://ant.apache.org/manual/.

Update: D. Frey, 1/9/12 add debug to javac command
-->
<project name="8-Puzzle" default="compile" basedir=".">

  <description>
    This is the build file for the 8-puzzle project
  </description>
  
  <!-- global properties for this build file -->
  <property name="source.dir" location="src/Proj3"/>
  <property name="build.dir" location="bin/Proj3"/>
  <property name="doc.dir" location="doc/Proj3"/>
  <property name="main.class" value="proj3/Proj3"/>
  
  <!-- set up some directories used by this project -->
  <target name="init" description="setup project directories">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${doc.dir}"/>
  </target>
  
  <!-- Compile the java code in ${src.dir} into ${build.dir} -->
  <target name="compile" depends="init" description="compile java sources">
    <javac srcdir="${source.dir}" destdir="${build.dir}" debug="true" debuglevel="lines,vars,source" includeantruntime="false"/>
  </target>

  <!-- execute the program with the fully qualified name in ${build.dir} after compiling -->
  <target name="run" description="run the project">
    <java classpath="${build.dir}" classname="${main.class}" fork="yes">
     <arg line="${args}"/>
    </java>
  </target>

  <!-- Delete the build & doc directories and Emacs backup (*~) files -->
  <target name="clean" description="tidy up the workspace">
    <delete dir="${build.dir}"/>
    <delete dir="${doc.dir}"/>
    <delete>
      <fileset defaultexcludes="no" dir="${source.dir}" includes="**/*~"/>
    </delete>
  </target>

  <!-- Generate javadocs for current project into ${doc.dir} -->
  <target name="doc" depends="init" description="generate documentation">
    <javadoc sourcepath="${source.dir}" destdir="${doc.dir}"/>
  </target>

</project>
